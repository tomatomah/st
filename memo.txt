登録画像    正解率   スタッフ   非スタッフ
                   検出率     正解率
----------------------------------------------
uniform_1   85.5%    82.0%      89.0%
uniform_2   87.0%    84.0%      90.0%  
uniform_3   83.0%    78.0%      88.0%
uniform_4   86.5%    85.0%      88.0%
uniform_5   84.0%    80.0%      88.0%
----------------------------------------------
平均        85.2%    81.8%      88.6%


5枚の登録画像での合計結果：
              予測
              スタッフ  非スタッフ
実際 スタッフ    409       91
    非スタッフ    57      443

正解率: 85.2%


計算方法
スタッフ検出率（再現率/Recall）
スタッフ検出率 = 正しくスタッフと判定した数 ÷ スタッフ画像100枚
例：82枚正解 ÷ 100枚 = 82.0%
非スタッフ正解率（特異度/Specificity）
非スタッフ正解率 = 正しく非スタッフと判定した数 ÷ 非スタッフ画像100枚
例：89枚正解 ÷ 100枚 = 89.0%
誤検知の情報について
はい、この2つから誤検知情報が完全に分かります！
誤検知率（非スタッフ→スタッフ）= 100% - 非スタッフ正解率
見逃し率（スタッフ→非スタッフ）= 100% - スタッフ検出率
具体例で説明
登録画像1の場合：
- スタッフ検出率: 82.0%
- 非スタッフ正解率: 89.0%

これから分かること：
- 見逃し: 18枚（100枚中18枚のスタッフを見逃した）
- 誤検知: 11枚（100枚中11枚の非スタッフを誤検知）
混同行列との関係
              予測
              スタッフ  非スタッフ
実際 スタッフ    82       18     ← スタッフ検出率 82%
    非スタッフ    11       89     ← 非スタッフ正解率 89%

登録画像    スタッフ    非スタッフ    誤検出率    未検出率
           検出率      検出率
----------------------------------------------------------------
uniform_1   82.0%      89.0%        11.0%      18.0%
uniform_2   84.0%      90.0%        10.0%      16.0%  
uniform_3   78.0%      88.0%        12.0%      22.0%
uniform_4   85.0%      88.0%        12.0%      15.0%
uniform_5   80.0%      88.0%        12.0%      20.0%
----------------------------------------------------------------
平均        81.8%      88.6%        11.4%      18.2%


モデル      最適     スタッフ   非スタッフ   誤検出率   未検出率   処理速度
          しきい値   検出率     検出率                           (FPS)
--------------------------------------------------------------------------------
RN50       0.58      81.8%      88.6%       11.4%     18.2%     65.3
RN101      0.60      83.2%      89.4%       10.6%     16.8%     52.1
ViT-B/32   0.62      85.6%      90.2%        9.8%     14.4%     48.7
ViT-L/14   0.64      87.4%      91.8%        8.2%     12.6%     28.9
...

ViT-L/14モデルのしきい値別性能
しきい値   スタッフ検出率   誤検出率   F1スコア
0.55         92.0%          18.5%      0.862
0.60         88.5%          12.3%      0.881
0.65         84.2%           7.8%      0.879  ← 最適
0.70         76.3%           4.2%      0.851

RN50  RN101  ViT-B/32  ViT-L/14 ...
F1スコア  0.85   0.86    0.88     0.90
処理速度   ◎      ◎       ○        △
精度      ○      ○       ◎        ◎


モデル      モデル   入力      最適      スタッフ検出率        誤検出率         処理速度
           サイズ   サイズ   しきい値   (平均±標準偏差)    (平均±標準偏差)     (FPS)
----------------------------------------------------------------------------------------
RN50        102MB   224×224    0.58     81.8% ± 2.8%      11.4% ± 0.9%       65.3
RN101       120MB   224×224    0.60     83.2% ± 2.5%      10.6% ± 0.8%       52.1
RN50x4      145MB   288×288    0.59     84.5% ± 2.2%      10.2% ± 0.7%       38.9
RN50x16     195MB   384×384    0.61     85.8% ± 2.0%       9.6% ± 0.7%       24.5
RN50x64     367MB   448×448    0.63     86.4% ± 1.8%       9.2% ± 0.6%       12.8
ViT-B/32     88MB   224×224    0.62     85.6% ± 2.1%       9.8% ± 0.8%       48.7
ViT-B/16     86MB   224×224    0.62     86.2% ± 1.9%       9.4% ± 0.7%       45.2
ViT-L/14    304MB   224×224    0.64     87.4% ± 1.7%       8.2% ± 0.6%       28.9
ViT-L/14    307MB   336×336    0.65     88.1% ± 1.5%       7.8% ± 0.5%       18.3
@336px
----------------------------------------------------------------------------------------

















📊 最適しきい値の設定方法について
1. 平均値を使う方法（基本）
pythonoptimal_thresholds = [0.58, 0.60, 0.62, 0.59, 0.61]  # 各登録画像の最適値
threshold = np.mean(optimal_thresholds)  # 0.60

メリット：シンプル、全体的なバランス
デメリット：外れ値の影響を受けやすい

2. 中央値を使う方法（推奨）
pythonthreshold = np.median(optimal_thresholds)  # 0.60

メリット：外れ値に強い、安定性が高い
デメリット：データ数が少ないと偏る可能性

3. 保守的な値を使う方法（セキュリティ重視）
python# 誤検出を最小化したい場合
threshold = np.percentile(optimal_thresholds, 75)  # 上位25%の値

メリット：誤検出が少ない
デメリット：見逃しが増える

4. 全体最適化（最も正確）
python# 全登録画像×全テスト画像で最適な単一しきい値を探索
def find_global_optimal_threshold():
    best_threshold = 0.5
    best_f1 = 0
    
    for threshold in np.arange(0.4, 0.8, 0.01):
        # 全画像で評価
        f1_score = evaluate_all_with_threshold(threshold)
        if f1_score > best_f1:
            best_f1 = f1_score
            best_threshold = threshold
    
    return best_threshold